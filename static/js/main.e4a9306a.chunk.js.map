{"version":3,"sources":["logo.svg","Navbar.js","Oders.js","Contactus.js","Body.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","Orders","Contactus","Body","useState","items","setitems","useEffect","axios","get","then","res","console","log","data","meals","catch","err","itemlist","map","obj","strMeal","src","strMealThumb","Footer","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kLAAAA,EAAOC,QAAU,IAA0B,kC,+ICwB5BC,MAlBf,WACI,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,6DACX,4CAEJ,yBAAKA,UAAU,6DACX,kBAAC,IAAD,CAAOC,GAAG,SAAV,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,kBCPLC,MAPf,WACI,OACI,yBAAKF,UAAU,iBACX,oDCIGG,MAPf,WACI,OACI,yBAAKH,UAAU,iBACX,4C,yBCkCGI,MAlCf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAEJC,EAFI,KAEGC,EAFH,KAIXC,qBAAU,WACNC,IAAMC,IAAI,gEACTC,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAAIG,MAChBR,EAASK,EAAIG,KAAKC,UACnBC,OAAM,SAACC,GACNL,QAAQC,IAAII,QAElB,IAEF,IAAMC,EAAWb,EAAMc,KAAI,SAACC,GACxB,OACI,yBAAKrB,UAAU,uFACX,2BAAIqB,EAAIC,SACR,yBAAKC,IAAKF,EAAIG,aAAcxB,UAAU,cACtC,4BAAQA,UAAU,qBAAlB,eAMZ,OACI,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACVmB,KCvBFM,MAPf,WACI,OAAO,yBAAKzB,UAAU,UAClB,yDACA,0CCmBO0B,MAff,WACE,OACE,yBAAK1B,UAAU,OAEb,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,CAAO2B,KAAK,QAAQC,UAAWxB,EAAMyB,OAAK,IAC1C,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAW1B,EAAQ2B,OAAK,IAC9C,kBAAC,IAAD,CAAOF,KAAK,aAAaC,UAAWzB,EAAW0B,OAAK,IACtD,kBAAC,EAAD,SCPcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.e4a9306a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport './allcss.css'\r\n\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <div className=\"my-nav\" >\r\n            <div className=\"row \">\r\n                <div className=\"col-md-6 d-flex align-items-center justify-content-center\">\r\n                    <h2>React Meals</h2>\r\n                </div>\r\n                <div className=\"col-md-6 d-flex align-items-center justify-content-center\">\r\n                    <Link  to=\"/body\">Home</Link>\r\n                    <Link to=\"/orders\">Order</Link>\r\n                    <Link to=\"/contactus\">Contact Us</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n     \r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\n\r\nfunction Orders(){\r\n    return(\r\n        <div className=\"bodyComponent\">\r\n            <h2>Orders Coming soon</h2>\r\n        </div>\r\n    )\r\n}\r\nexport default Orders","import React from 'react'\r\n\r\nfunction Contactus(){\r\n    return(\r\n        <div className=\"bodyComponent\">\r\n            <h1>Contact Us</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Contactus","import React,{useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport './allcss.css'\r\n\r\nfunction Body(){\r\n\r\n    const [items, setitems] = useState([])\r\n\r\n    useEffect(()=>{\r\n        axios.get('https://www.themealdb.com/api/json/v1/1/filter.php?c=Seafood')\r\n        .then((res)=>{\r\n            console.log(res.data)\r\n            setitems(res.data.meals)\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    },[])\r\n\r\n    const itemlist = items.map((obj)=>{\r\n        return(\r\n            <div className=\"col-md-4 bord flex-column d-flex align-items-center justify-content-center my-width\">\r\n                <p>{obj.strMeal}</p>\r\n                <img src={obj.strMealThumb} className=\"img-fluid\"/>\r\n                <button className=\"btn btn-secondary\">Details</button>\r\n\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div className=\"bodyComponent \">\r\n            <div className=\"row\">\r\n                {itemlist}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body","import React from 'react'\r\nimport './allcss.css'\r\n\r\nfunction Footer(){\r\n    return <div className=\"footer\" >\r\n        <p>Designed and Developed By </p>\r\n        <p>vkashegde</p>\r\n    </div>\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter,Route} from 'react-router-dom'\nimport Navbar from './Navbar'\nimport Orders from './Oders'\nimport Contactus from './Contactus'\nimport Body from './Body'\nimport Footer from './Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <BrowserRouter>\n      <Navbar/>\n        <Route path='/body' component={Body} exact/>\n        <Route path='/orders' component={Orders} exact/>\n        <Route path='/contactus' component={Contactus} exact/>\n      <Footer/>\n      </BrowserRouter>\n      \n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}